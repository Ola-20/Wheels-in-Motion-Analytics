#version: "3.8"

x-airflow-common: &airflow-common
  image: airflow-img:latest              # your custom image built from Dockerfile
  env_file:
    - .env
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKEND: airflow.api.auth.backend.basic_auth
    #GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
    # let google libs inside containers find ADC:
   # GOOGLE_APPLICATION_CREDENTIALS: /var/secrets/google/adc.json
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    # mount your ADC file from the VM into the containers (read-only)
    #- ${HOST_ADC_PATH}:/opt/airflow/gcloud/adc.json:ro
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres:
      condition: service_healthy
  restart: unless-stopped

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: unless-stopped

  airflow-init:
    <<: *airflow-common
    restart: "no"
    entrypoint: /bin/bash
    command:
      - -c
      - |
        set -e
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        airflow db upgrade
        airflow users create \
          --username "${_AIRFLOW_WWW_USER_USERNAME:-airflow}" \
          --password "${_AIRFLOW_WWW_USER_PASSWORD:-airflow}" \
          --firstname Admin --lastname User --role Admin --email admin@example.com || true
        airflow version
    user: "0:0"
    volumes:
      - .:/sources

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"         # open this in the GCP VM firewall
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  # optional: run ad-hoc CLI commands
  airflow-cli:
    <<: *airflow-common
    profiles: [debug]
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command: ["bash", "-c", "airflow"]

volumes:
  postgres-db-volume:
